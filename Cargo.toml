[package]
name = "ecdsa_wasm"
version = "0.1.0"
edition = "2021"
authors = ["brendon <brendon@litprotocol.com>"]
description = "WASM friendly recombination code for threshold ECDSA."
homepage = "https://github.com/lit-protocol"
license = "GPL-3.0-or-later"

[features]
default = ["wee_alloc"]

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
wasm-bindgen = { version = "0.2.82", features = ["serde-serialize"] }
web-sys = { version = "0.3.5", features = ["console"] }
js-sys = "0.3.59"

#rand = { version = "0.6" }
serde = "1.0"
serde_derive = "1.0"
serde_json = "1.0"

num-bigint = { version = "0.2.2", features = [ "rand"] }
num-integer = "0.1"
num-traits = "0.2.15"

elliptic-curve = { version = "0.13.2", features = ["serde"] }  
k256 = {version = "0.13.1", features = ["arithmetic","serde"] } 
p256 = {version = "0.13.1", features = ["arithmetic","serde"] }
hex = "0.4.3"
# [dependencies.rand]
# getrandom = { version = "0.2", features = ["js"] }

# The `console_error_panic_hook` crate provides better debugging of panics by
# logging them with `console.error`. This is great for development, but requires
# all the `std::fmt` and `std::panicking` infrastructure, so isn't great for
# code size when deploying.
console_error_panic_hook = { version = "0.1.6", optional = false }

# `wee_alloc` is a tiny allocator for wasm that is only ~1K in code size
# compared to the default allocator's ~10K. It is slower than the default
# allocator, however.
#
# Unfortunately, `wee_alloc` requires nightly Rust when targeting wasm for now.
wee_alloc = { version = "0.4.5", optional = true }

getrandom = { version = "0.2", features = ["js"] }
# tokio = { version = "1.28.0",  features = ["rt-multi-thread"] }

[dependencies.rand]
version = "0.6"
package = "rand"

[profile.release]
lto = true
opt-level = "z"
